/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Payouts API
 * API público para realizar pagos a terceros través de Wompi.
 * OpenAPI spec version: 1.0.0
 */
import { payoutsInstance } from '../api/payouts-instance'
export type CreateImmediatePayoutPaymentType =
	(typeof CreateImmediatePayoutPaymentType)[keyof typeof CreateImmediatePayoutPaymentType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImmediatePayoutPaymentType = {
	PAYROLL: 'PAYROLL',
	PROVIDERS: 'PROVIDERS',
	OTHER: 'OTHER',
} as const

/**
 * Solo en sandbox. Emular el estado final de la transacción.
 */
export type CreateImmediatePayoutTransactionStatus =
	(typeof CreateImmediatePayoutTransactionStatus)[keyof typeof CreateImmediatePayoutTransactionStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImmediatePayoutTransactionStatus = {
	APPROVED: 'APPROVED',
	FAILED: 'FAILED',
} as const

export interface CreateImmediatePayout {
	reference: string
	accountId: string
	paymentType: CreateImmediatePayoutPaymentType
	/** Solo en sandbox. Emular el estado final de la transacción. */
	transactionStatus?: CreateImmediatePayoutTransactionStatus
	transactions: CreateTransaction[]
}

export type CreateScheduledPayoutAllOf = {
	dispersionDatetime: string
}

export type CreateScheduledPayout = CreateImmediatePayout &
	CreateScheduledPayoutAllOf

export type CreateRecurringPayoutAllOfRecurringInterval =
	(typeof CreateRecurringPayoutAllOfRecurringInterval)[keyof typeof CreateRecurringPayoutAllOfRecurringInterval]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateRecurringPayoutAllOfRecurringInterval = {
	biweek: 'biweek',
	month: 'month',
} as const

export type CreateRecurringPayoutAllOfRecurringMonths =
	(typeof CreateRecurringPayoutAllOfRecurringMonths)[keyof typeof CreateRecurringPayoutAllOfRecurringMonths]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateRecurringPayoutAllOfRecurringMonths = {
	NUMBER_3: 3,
	NUMBER_6: 6,
	NUMBER_12: 12,
} as const

export type CreateRecurringPayoutAllOfRecurring = {
	interval: CreateRecurringPayoutAllOfRecurringInterval
	months: CreateRecurringPayoutAllOfRecurringMonths
	description?: string
}

export type CreateRecurringPayoutAllOf = {
	recurring: CreateRecurringPayoutAllOfRecurring
}

export type CreateRecurringPayout = CreateScheduledPayout &
	CreateRecurringPayoutAllOf

export interface PayoutCreateResponse {
	status?: number
	meta?: PayoutCreateResponseMeta
	code?: string
	message?: string
	data?: PayoutCreateResponseData
}

export type CreateTransactionLegalIdType =
	(typeof CreateTransactionLegalIdType)[keyof typeof CreateTransactionLegalIdType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTransactionLegalIdType = {
	CC: 'CC',
	NIT: 'NIT',
	PP: 'PP',
	CE: 'CE',
	TI: 'TI',
	DNI: 'DNI',
} as const

export type CreateTransactionAccountType =
	(typeof CreateTransactionAccountType)[keyof typeof CreateTransactionAccountType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTransactionAccountType = {
	AHORROS: 'AHORROS',
	CORRIENTE: 'CORRIENTE',
	DEPOSITO_ELECTRONICO: 'DEPOSITO_ELECTRONICO',
} as const

export type CreateTransactionPersonType =
	(typeof CreateTransactionPersonType)[keyof typeof CreateTransactionPersonType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTransactionPersonType = {
	NATURAL: 'NATURAL',
	JURIDICA: 'JURIDICA',
} as const

export interface CreateTransaction {
	legalIdType: CreateTransactionLegalIdType
	legalId: string
	bankId: string
	accountType: CreateTransactionAccountType
	accountNumber: string
	name: string
	amount: number
	personType: CreateTransactionPersonType
	description?: string
	phone?: string
	email?: string
	reference?: string
}

export interface CreatePayoutError {
	code?: string
	message?: string
	type?: string
	meta?: PayoutCreateResponseMeta
}

export type PayoutsFileBodyFileType =
	(typeof PayoutsFileBodyFileType)[keyof typeof PayoutsFileBodyFileType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayoutsFileBodyFileType = {
	WOMPI: 'WOMPI',
	PAB: 'PAB',
	DISFON: 'DISFON',
	BANCO_OCCIDENTE_FC: 'BANCO_OCCIDENTE_FC',
	DAVIVIENDA: 'DAVIVIENDA',
	SAP: 'SAP',
} as const

export type PayoutsFileBodyPaymentType =
	(typeof PayoutsFileBodyPaymentType)[keyof typeof PayoutsFileBodyPaymentType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayoutsFileBodyPaymentType = {
	PAYROLL: 'PAYROLL',
	PROVIDERS: 'PROVIDERS',
	OTHER: 'OTHER',
} as const

/**
 * Solo en sandbox. Emular el estado final de la transacción.
 */
export type PayoutsFileBodyTransactionStatus =
	(typeof PayoutsFileBodyTransactionStatus)[keyof typeof PayoutsFileBodyTransactionStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayoutsFileBodyTransactionStatus = {
	APPROVED: 'APPROVED',
	FAILED: 'FAILED',
} as const

export type PayoutsFileBodyInterval =
	(typeof PayoutsFileBodyInterval)[keyof typeof PayoutsFileBodyInterval]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayoutsFileBodyInterval = {
	biweek: 'biweek',
	month: 'month',
} as const

export type PayoutsFileBodyMonths =
	(typeof PayoutsFileBodyMonths)[keyof typeof PayoutsFileBodyMonths]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayoutsFileBodyMonths = {
	NUMBER_3: 3,
	NUMBER_6: 6,
	NUMBER_12: 12,
} as const

export interface PayoutsFileBody {
	reference: string
	fileType: PayoutsFileBodyFileType
	file: Blob
	accountId: string
	paymentType: PayoutsFileBodyPaymentType
	/** Solo en sandbox. Emular el estado final de la transacción. */
	transactionStatus?: PayoutsFileBodyTransactionStatus
	dispersionDatetime?: string
	interval?: PayoutsFileBodyInterval
	months?: PayoutsFileBodyMonths
	description?: string
}

export interface InlineResponse200 {
	id?: string
	name?: string
	code?: string
	achCode?: number
	swiftCode?: string
	allowedForOrigin?: boolean
	isElectronicDeposit?: boolean
	createdAt?: string
	updatedAt?: string
}

export interface AccountsBank {
	code?: string
	name?: string
}

export type InlineResponse2001AccountType =
	(typeof InlineResponse2001AccountType)[keyof typeof InlineResponse2001AccountType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InlineResponse2001AccountType = {
	AHORROS: 'AHORROS',
	CORRIENTE: 'CORRIENTE',
	DEPOSITO_ELECTRONICO: 'DEPOSITO_ELECTRONICO',
} as const

export interface InlineResponse2001 {
	id?: string
	balanceInCents?: number
	number?: string
	status?: string
	accountType?: InlineResponse2001AccountType
	bank?: AccountsBank
	updatedAt?: string
}

export interface PayoutCreateResponseMeta {
	trace_id?: string
}

export interface PayoutCreateResponseData {
	payoutId?: string
	transactions?: number
	success?: number
	failed?: number
}

export type PayoutResponsePayerInfo = {
	name: string
	email: string
	phone: string
	legalId: string
	personType: string
	legalIdType: string
}

export interface PayoutResponse {
	id: string
	reference: string
	type: string
	amountInCents: number
	status: string
	payerInfo: PayoutResponsePayerInfo
	statusMessage: string
	totalTransactions: number
	dispersionDatetime: string
	paymentType: string
	createdAt: string
}

export type TransactionResponseStatus =
	(typeof TransactionResponseStatus)[keyof typeof TransactionResponseStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionResponseStatus = {
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	CANCELLED: 'CANCELLED',
	FAILED: 'FAILED',
	READY_TO_FILE: 'READY_TO_FILE',
	UNKNOWN: 'UNKNOWN',
	ADDED_TO_FILE: 'ADDED_TO_FILE',
	PROCESSING: 'PROCESSING',
} as const

export interface TransactionResponse {
	id?: string
	amountInCents?: number
	status?: TransactionResponseStatus
	payeeInfo?: PayeeInfo
	fee?: FeeInfo
	reference?: string
	/** @nullable */
	failureReason?: string | null
	appliedAt?: string
	createdAt?: string
	payout?: PayoutResponse
}

export type TransactionResponse1Status =
	(typeof TransactionResponse1Status)[keyof typeof TransactionResponse1Status]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionResponse1Status = {
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	CANCELLED: 'CANCELLED',
	FAILED: 'FAILED',
	UNKNOWN: 'UNKNOWN',
} as const

export interface TransactionResponse1 {
	id?: string
	amountInCents?: number
	status?: TransactionResponse1Status
	payeeInfo?: PayeeInfo
	fee?: FeeInfo
	/** @nullable */
	failureReason?: string | null
	reference?: string
	appliedAt?: string
	createdAt?: string
}

export type PayeeInfoAccountType =
	(typeof PayeeInfoAccountType)[keyof typeof PayeeInfoAccountType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayeeInfoAccountType = {
	AHORROS: 'AHORROS',
	CORRIENTE: 'CORRIENTE',
	DEPOSITO_ELECTRONICO: 'DEPOSITO_ELECTRONICO',
} as const

export type PayeeInfoLegalIdType =
	(typeof PayeeInfoLegalIdType)[keyof typeof PayeeInfoLegalIdType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PayeeInfoLegalIdType = {
	CC: 'CC',
	NIT: 'NIT',
	PP: 'PP',
	CE: 'CE',
	TI: 'TI',
	DNI: 'DNI',
} as const

export interface PayeeInfo {
	bank?: string
	name?: string
	email?: string
	legalId?: string
	bankCode?: string
	accountType?: PayeeInfoAccountType
	legalIdType?: PayeeInfoLegalIdType
	accountNumber?: string
}

export interface FeeInfo {
	feeInCents?: number
	vatPercentage?: number
	gmfInCents?: number
	dynamicFeeInCents?: number
	vatInCents?: number
	totalInCents?: number
}

export type LimitsResponseLimits = {
	dailyLimit?: number
	dailyAvailable?: number
	dailyConsumed?: number
}

export interface LimitsResponse {
	numberOfTransactionsConsumed?: number
	limits?: LimitsResponseLimits
}

export interface BalanceRecharge {
	accountId: string
	/**
	 * Monto a recargar en centavos
	 * @minimum 10000
	 * @maximum 1000000000
	 */
	amountInCents: number
}

export interface ReportsPayoutsResponse {
	_id?: string
	reportId?: string
	runAt?: string
	status?: string
	stackTrace?: string
	queryStartDate?: string
	queryEndDate?: string
	fileBucketKey?: string
}

export type PostPayoutsBody =
	| CreateImmediatePayout
	| CreateScheduledPayout
	| CreateRecurringPayout

export type GetPayoutsParams = {
	status?: GetPayoutsStatusItem[]
	fromDate?: string
	toDate?: string
	reference?: string
	id?: string
	/**
	 * Número de la página que se quiere consultar.
	 */
	page?: number
	/**
	 * Cantidad de elementos por página.
	 */
	limit?: number
}

export type GetPayoutsStatusItem =
	(typeof GetPayoutsStatusItem)[keyof typeof GetPayoutsStatusItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPayoutsStatusItem = {
	PENDING: 'PENDING',
	REJECTED: 'REJECTED',
	TOTAL_PAYMENT: 'TOTAL_PAYMENT',
	PARTIAL_PAYMENT: 'PARTIAL_PAYMENT',
	PENDING_APPROVAL: 'PENDING_APPROVAL',
	NOT_APPROVED: 'NOT_APPROVED',
	AFE_REJECTED: 'AFE_REJECTED',
	AFE_ON_HOLD: 'AFE_ON_HOLD',
} as const

export type GetPayouts200Meta = {
	trace_id: string
}

export type GetPayouts200Data = {
	page?: number
	limit?: number
	total?: number
	pages?: number
	records?: PayoutResponse[]
}

export type GetPayouts200 = {
	status?: number
	meta?: GetPayouts200Meta
	code?: string
	message?: string
	data?: GetPayouts200Data
}

export type GetAccountsParams = {
	bankCodes?: string[]
	status?: GetAccountsStatusItem[]
}

export type GetAccountsStatusItem =
	(typeof GetAccountsStatusItem)[keyof typeof GetAccountsStatusItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAccountsStatusItem = {
	IN_REVIEW: 'IN_REVIEW',
	ACTIVE: 'ACTIVE',
	INACTIVE: 'INACTIVE',
} as const

export type GetAccounts200Meta = {
	trace_id: string
}

export type GetAccounts200 = {
	status?: number
	meta?: GetAccounts200Meta
	code?: string
	message?: string
	data?: InlineResponse2001[]
}

export type GetPayoutsPayoutId200Meta = {
	trace_id: string
}

export type GetPayoutsPayoutId200 = {
	status?: number
	meta?: GetPayoutsPayoutId200Meta
	code?: string
	message?: string
	data?: PayoutResponse
}

export type GetPayoutsPayoutId400Meta = {
	trace_id?: string
}

export type GetPayoutsPayoutId400 = {
	status?: number
	meta?: GetPayoutsPayoutId400Meta
	code?: string
	message?: string
	type?: string
}

export type GetPayoutsPayoutIdTransactionsParams = {
	reference?: string
	status?: GetPayoutsPayoutIdTransactionsStatusItem[]
	accountNumber?: string
	payeeName?: string
	/**
	 * Número de la página que se quiere consultar.
	 */
	page?: number
	/**
	 * Cantidad de elementos por página.
	 */
	limit?: number
}

export type GetPayoutsPayoutIdTransactionsStatusItem =
	(typeof GetPayoutsPayoutIdTransactionsStatusItem)[keyof typeof GetPayoutsPayoutIdTransactionsStatusItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPayoutsPayoutIdTransactionsStatusItem = {
	READY_TO_FILE: 'READY_TO_FILE',
	ADDED_TO_FILE: 'ADDED_TO_FILE',
	PROCESSING: 'PROCESSING',
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	FAILED: 'FAILED',
	REJECTED: 'REJECTED',
} as const

export type GetPayoutsPayoutIdTransactions200Meta = {
	trace_id: string
}

export type GetPayoutsPayoutIdTransactions200Data = {
	page?: number
	limit?: number
	total?: number
	pages?: number
	records?: TransactionResponse1[]
}

export type GetPayoutsPayoutIdTransactions200 = {
	status?: number
	meta?: GetPayoutsPayoutIdTransactions200Meta
	code?: string
	message?: string
	data?: GetPayoutsPayoutIdTransactions200Data
}

export type GetPayoutsPayoutIdTransactions400Meta = {
	trace_id?: string
}

export type GetPayoutsPayoutIdTransactions400 = {
	status?: number
	meta?: GetPayoutsPayoutIdTransactions400Meta
	code?: string
	message?: string
	type?: string
}

export type GetPayoutsPayoutIdTransactionsTransactionId200Meta = {
	trace_id: string
}

export type GetPayoutsPayoutIdTransactionsTransactionId200 = {
	status?: number
	meta?: GetPayoutsPayoutIdTransactionsTransactionId200Meta
	code?: string
	message?: string
	data?: TransactionResponse
}

export type GetPayoutsPayoutIdTransactionsTransactionId400Meta = {
	trace_id?: string
}

export type GetPayoutsPayoutIdTransactionsTransactionId400 = {
	status?: number
	meta?: GetPayoutsPayoutIdTransactionsTransactionId400Meta
	code?: string
	message?: string
	type?: string
}

export type GetTransactionsReferenceParams = {
	status?: GetTransactionsReferenceStatusItem[]
	/**
	 * Número de la página que se quiere consultar.
	 */
	page?: number
	/**
	 * Cantidad de elementos por página.
	 */
	limit?: number
}

export type GetTransactionsReferenceStatusItem =
	(typeof GetTransactionsReferenceStatusItem)[keyof typeof GetTransactionsReferenceStatusItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTransactionsReferenceStatusItem = {
	READY_TO_FILE: 'READY_TO_FILE',
	ADDED_TO_FILE: 'ADDED_TO_FILE',
	PROCESSING: 'PROCESSING',
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	FAILED: 'FAILED',
	REJECTED: 'REJECTED',
} as const

export type GetTransactionsReference200Meta = {
	trace_id: string
}

export type GetTransactionsReference200Data = {
	page?: number
	limit?: number
	total?: number
	pages?: number
	records?: TransactionResponse1[]
}

export type GetTransactionsReference200 = {
	status?: number
	meta?: GetTransactionsReference200Meta
	code?: string
	message?: string
	data?: GetTransactionsReference200Data
}

export type GetTransactionsReference400Meta = {
	trace_id?: string
}

export type GetTransactionsReference400 = {
	status?: number
	meta?: GetTransactionsReference400Meta
	code?: string
	message?: string
	type?: string
}

export type GetReportsPayoutsParams = {
	/**
	 * Número de la página que se quiere consultar.
	 */
	page?: number
	/**
	 * Cantidad de elementos por página.
	 */
	limit?: number
	periodicity: GetReportsPayoutsPeriodicity
	reportType: GetReportsPayoutsReportType
}

export type GetReportsPayoutsPeriodicity =
	(typeof GetReportsPayoutsPeriodicity)[keyof typeof GetReportsPayoutsPeriodicity]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReportsPayoutsPeriodicity = {
	daily: 'daily',
	weekly: 'weekly',
	biweekly: 'biweekly',
	monthly: 'monthly',
} as const

export type GetReportsPayoutsReportType =
	(typeof GetReportsPayoutsReportType)[keyof typeof GetReportsPayoutsReportType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReportsPayoutsReportType = {
	payouts: 'payouts',
	transactions: 'transactions',
} as const

export type GetReportsPayouts200Meta = {
	trace_id: string
}

export type GetReportsPayouts200Data = {
	reports?: ReportsPayoutsResponse[]
	total?: number
	pages?: number
	limit?: number
	page?: number
}

export type GetReportsPayouts200 = {
	status?: number
	meta?: GetReportsPayouts200Meta
	code?: string
	message?: string
	data?: GetReportsPayouts200Data
}

export type GetReportsPresignedUrlParams = {
	reportExecutionId: string
	reportIntegration: GetReportsPresignedUrlReportIntegration
}

export type GetReportsPresignedUrlReportIntegration =
	(typeof GetReportsPresignedUrlReportIntegration)[keyof typeof GetReportsPresignedUrlReportIntegration]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReportsPresignedUrlReportIntegration = {
	payouts: 'payouts',
	merchant_reports: 'merchant_reports',
} as const

export type GetReportsPresignedUrl200Meta = {
	trace_id: string
}

export type GetReportsPresignedUrl200 = {
	status?: number
	meta?: GetReportsPresignedUrl200Meta
	code?: string
	message?: string
	data?: string
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Crea una nueva orden de pago.
 * @summary Crear una orden de pago.
 */
export const postPayouts = (
	postPayoutsBody: PostPayoutsBody,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<PayoutCreateResponse>(
		{
			url: '/payouts',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: postPayoutsBody,
		},
		options,
	)
}

/**
 * Regresa todos los lotes con soporte de paginación.
 * @summary Regresa todos los lotes.
 */
export const getPayouts = (
	params?: GetPayoutsParams,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetPayouts200>(
		{ url: '/payouts', method: 'GET', params },
		options,
	)
}

/**
 * Crea una nueva orden de pago a partir de un archivo.
 * @summary Crea una orden de pago desde un archivo.
 */
export const postPayoutsFile = (
	payoutsFileBody: PayoutsFileBody,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	const formData = new FormData()
	formData.append('reference', payoutsFileBody.reference)
	formData.append('fileType', payoutsFileBody.fileType)
	formData.append('file', payoutsFileBody.file)
	formData.append('accountId', payoutsFileBody.accountId)
	formData.append('paymentType', payoutsFileBody.paymentType)
	if (payoutsFileBody.transactionStatus !== undefined) {
		formData.append('transactionStatus', payoutsFileBody.transactionStatus)
	}
	if (payoutsFileBody.dispersionDatetime !== undefined) {
		formData.append('dispersionDatetime', payoutsFileBody.dispersionDatetime)
	}
	if (payoutsFileBody.interval !== undefined) {
		formData.append('interval', payoutsFileBody.interval)
	}
	if (payoutsFileBody.months !== undefined) {
		formData.append('months', payoutsFileBody.months.toString())
	}
	if (payoutsFileBody.description !== undefined) {
		formData.append('description', payoutsFileBody.description)
	}

	return payoutsInstance<PayoutCreateResponse>(
		{
			url: '/payouts/file',
			method: 'POST',
			headers: { 'Content-Type': 'multipart/form-data' },
			data: formData,
		},
		options,
	)
}

/**
 * Regresa la lista de bancos disponibles para realizar pagos.
 * @summary Regresa la lista de bancos.
 */
export const getBanks = (options?: SecondParameter<typeof payoutsInstance>) => {
	return payoutsInstance<InlineResponse200[]>(
		{ url: '/banks', method: 'GET' },
		options,
	)
}

/**
 * Regresa la lista de cuentas disponibles para dispersar los pagos.
 * @summary Regresa la lista de cuentas.
 */
export const getAccounts = (
	params?: GetAccountsParams,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetAccounts200>(
		{ url: '/accounts', method: 'GET', params },
		options,
	)
}

/**
 * Regresa los límites diarios, incluyendo el tope diario, disponible y consumido. En caso de tener un plan por suscripción, también regresará las transacciones asociadas al plan.
 * @summary Regresa los límites y transacciones.
 */
export const getLimits = (
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<LimitsResponse>(
		{ url: '/limits', method: 'GET' },
		options,
	)
}

/**
 * Regresa la información de un lote específico utilizando su identificador único.
 * @summary Regresa un lote específico.
 */
export const getPayoutsPayoutId = (
	payoutId: string,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetPayoutsPayoutId200>(
		{ url: `/payouts/${payoutId}`, method: 'GET' },
		options,
	)
}

/**
 * Regresa la información de todas las transacciones de un lote, utilizando el identificador único del lote, con soporte de paginación.
 * @summary Regresa todas las transacciones de un lote específico.
 */
export const getPayoutsPayoutIdTransactions = (
	payoutId: string,
	params?: GetPayoutsPayoutIdTransactionsParams,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetPayoutsPayoutIdTransactions200>(
		{ url: `/payouts/${payoutId}/transactions`, method: 'GET', params },
		options,
	)
}

/**
 * Regresa la información de una transacción específica de un lote, utilizando los identificadores únicos del lote y la transacción.
 * @summary Regresa una transacción específica de un lote específico.
 */
export const getPayoutsPayoutIdTransactionsTransactionId = (
	payoutId: string,
	transactionId: string,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetPayoutsPayoutIdTransactionsTransactionId200>(
		{
			url: `/payouts/${payoutId}/transactions/${transactionId}`,
			method: 'GET',
		},
		options,
	)
}

/**
 * Regresa la información de todas las transacciones de un lote, utilizando la referencia del lote, con soporte de paginación.
 * @summary Regresa todas las transacciones de una referencia específica.
 */
export const getTransactionsReference = (
	reference: string,
	params?: GetTransactionsReferenceParams,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetTransactionsReference200>(
		{ url: `/transactions/${reference}`, method: 'GET', params },
		options,
	)
}

/**
 * Regresa todos los reportes con soporte de paginación y filtros.
 * @summary Regresa todos los reportes.
 */
export const getReportsPayouts = (
	params: GetReportsPayoutsParams,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetReportsPayouts200>(
		{ url: '/reports/payouts', method: 'GET', params },
		options,
	)
}

/**
 * Obtener CSV de un reporte.
 * @summary Obtener CSV de un reporte.
 */
export const getReportsPresignedUrl = (
	params: GetReportsPresignedUrlParams,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<GetReportsPresignedUrl200>(
		{ url: '/reports/presigned_url', method: 'GET', params },
		options,
	)
}

/**
 * Recargar la cuenta bancaria con un monto en centavos
 * @summary Recargar cuenta.
 */
export const postAccountsBalanceRecharge = (
	balanceRecharge: BalanceRecharge,
	options?: SecondParameter<typeof payoutsInstance>,
) => {
	return payoutsInstance<InlineResponse2001[]>(
		{
			url: '/accounts/balance-recharge',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: balanceRecharge,
		},
		options,
	)
}

export type PostPayoutsResult = NonNullable<
	Awaited<ReturnType<typeof postPayouts>>
>
export type GetPayoutsResult = NonNullable<
	Awaited<ReturnType<typeof getPayouts>>
>
export type PostPayoutsFileResult = NonNullable<
	Awaited<ReturnType<typeof postPayoutsFile>>
>
export type GetBanksResult = NonNullable<Awaited<ReturnType<typeof getBanks>>>
export type GetAccountsResult = NonNullable<
	Awaited<ReturnType<typeof getAccounts>>
>
export type GetLimitsResult = NonNullable<Awaited<ReturnType<typeof getLimits>>>
export type GetPayoutsPayoutIdResult = NonNullable<
	Awaited<ReturnType<typeof getPayoutsPayoutId>>
>
export type GetPayoutsPayoutIdTransactionsResult = NonNullable<
	Awaited<ReturnType<typeof getPayoutsPayoutIdTransactions>>
>
export type GetPayoutsPayoutIdTransactionsTransactionIdResult = NonNullable<
	Awaited<ReturnType<typeof getPayoutsPayoutIdTransactionsTransactionId>>
>
export type GetTransactionsReferenceResult = NonNullable<
	Awaited<ReturnType<typeof getTransactionsReference>>
>
export type GetReportsPayoutsResult = NonNullable<
	Awaited<ReturnType<typeof getReportsPayouts>>
>
export type GetReportsPresignedUrlResult = NonNullable<
	Awaited<ReturnType<typeof getReportsPresignedUrl>>
>
export type PostAccountsBalanceRechargeResult = NonNullable<
	Awaited<ReturnType<typeof postAccountsBalanceRecharge>>
>
