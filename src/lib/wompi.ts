/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Wompi API
 * API p√∫blico para pagos seguros de Wompi.
 * OpenAPI spec version: 1.2.0
 */
import { defaultInstance } from '../api/default-instance'
/**
 * Moneda en la que se va a realizar la transacci√≥n. √önicamente COP actualmente.
 */
export type TransactionNewCurrency =
	(typeof TransactionNewCurrency)[keyof typeof TransactionNewCurrency]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionNewCurrency = {
	COP: 'COP',
} as const

/**
 * Detalles del m√©todo de pago. OBLIGATORIO si no se usa un payment_source_id. Para m√°s detalles consulta `https://docs.wompi.co/docs/en/metodos-de-pago`
 */
export type TransactionNewPaymentMethod = { [key: string]: unknown }

export type TransactionNewCustomerData = {
	/** Tel√©fono del pagador, incluyendo c√≥digo del pa√≠s */
	phone_number?: string
	/** Nombre completo del pagador (nombres y apellidos) */
	full_name: string
	/** N√∫mero de documento del pagador */
	legal_id?: string
	legal_id_type?: LegalIdTypes
}

export type TransactionNewShippingAddress = {
	/** Datos primarios de la direcci√≥n */
	address_line_1: string
	/** Datos secundarios de la direcci√≥n */
	address_line_2?: string
	/** Pa√≠s de env√≠o en formato ISO 3166-1 Alpha-2 (2 letras may√∫sculas) */
	country: string
	/** Departamento / Estado / regi√≥n (seg√∫n aplique) */
	region: string
	/** Ciudad o municipio */
	city: string
	/** Nombre de quien recibe */
	name?: string
	/** Tel√©fono de la persona que recibe */
	phone_number: string
	/** C√≥digo postal */
	postal_code?: string
}

export interface TransactionNew {
	/** Token JWT de aceptaci√≥n (ver https://docs.wompi.co/docs/en/tokens-de-aceptacion) */
	acceptance_token: string
	/** Token JWT de aceptaci√≥n personal (ver https://docs.wompi.co/docs/en/tokens-de-aceptacion) */
	accept_personal_auth: string
	/**
	 * Monto total en centavos de la transacci√≥n. Por ejemplo, para $1.000 se escribe 100000
	 * @minimum 1
	 * @maximum 1000000000000
	 */
	amount_in_cents: number
	/** Moneda en la que se va a realizar la transacci√≥n. √önicamente COP actualmente. */
	currency: TransactionNewCurrency
	/** Hash criptogr√°fico asim√©trico para validar la integridad de la informaci√≥n de la transacci√≥n. */
	signature: string
	/** Email al cual se env√≠a el comprobante de pago. */
	customer_email: string
	/** Detalles del m√©todo de pago. OBLIGATORIO si no se usa un payment_source_id. Para m√°s detalles consulta `https://docs.wompi.co/docs/en/metodos-de-pago` */
	payment_method?: TransactionNewPaymentMethod
	/** ID de fuente de pago. OBLIGATORIA si no se usa un payment_method */
	payment_source_id?: number
	/** URL a la que se lleva al usuario despu√©s de hacer el pago. */
	redirect_url?: string
	/** Referencia √∫nica en la base de datos de cada comercio. */
	reference: string
	/** Fecha y hora en formato ISO8601 (UTC+0000), activa un contador regresivo indicando el tiempo restante para la expiraci√≥n del inicio del pago. */
	expiration_time?: string
	customer_data?: TransactionNewCustomerData
	shipping_address?: TransactionNewShippingAddress
	/** Indica si la transacci√≥n es recurrente */
	recurrent?: boolean
}

export interface CardToken {
	id?: string
	created_at?: string
	brand?: string
	name?: string
	last_four?: string
	bin?: string
	exp_year?: string
	exp_month?: string
	card_holder?: string
	expires_at?: string
}

/**
 * Tipo de documento del pagador
 */
export type LegalIdTypes = (typeof LegalIdTypes)[keyof typeof LegalIdTypes]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LegalIdTypes = {
	CC: 'CC',
	NIT: 'NIT',
	PP: 'PP',
	CE: 'CE',
	TI: 'TI',
	DNI: 'DNI',
	RG: 'RG',
	OTHER: 'OTHER',
} as const

export type PaymentMethodTypes =
	(typeof PaymentMethodTypes)[keyof typeof PaymentMethodTypes]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentMethodTypes = {
	CARD: 'CARD',
	NEQUI: 'NEQUI',
	PSE: 'PSE',
	BANCOLOMBIA: 'BANCOLOMBIA',
	BANCOLOMBIA_TRANSFER: 'BANCOLOMBIA_TRANSFER',
	BANCOLOMBIA_COLLECT: 'BANCOLOMBIA_COLLECT',
	BANCOLOMBIA_QR: 'BANCOLOMBIA_QR',
} as const

export type TransactionStatuses =
	(typeof TransactionStatuses)[keyof typeof TransactionStatuses]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionStatuses = {
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	DECLINED: 'DECLINED',
	ERROR: 'ERROR',
	VOIDED: 'VOIDED',
} as const

export type TransactionCustomerEmail = { [key: string]: unknown }

/**
 * Moneda en la que se realiz√≥ la transacci√≥n.
 */
export type TransactionCurrency =
	(typeof TransactionCurrency)[keyof typeof TransactionCurrency]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionCurrency = {
	COP: 'COP',
} as const

export type TransactionPaymentMethod = { [key: string]: unknown }

export type TransactionShippingAddress = { [key: string]: unknown }

export interface Transaction {
	id?: string
	created_at?: string
	amount_in_cents?: number
	status?: TransactionStatuses
	/** Referencia √∫nica enviada por el comercio */
	reference?: string
	customer_email?: TransactionCustomerEmail
	/** Moneda en la que se realiz√≥ la transacci√≥n. */
	currency?: TransactionCurrency
	payment_method_type?: PaymentMethodTypes
	payment_method?: TransactionPaymentMethod
	shipping_address?: TransactionShippingAddress
	redirect_url?: string
	payment_link_id?: string
}

export interface NequiTokenNew {
	/** N√∫mero celular asociado a la cuenta Nequi */
	phone_number: string
}

export type NequiTokenStatus =
	(typeof NequiTokenStatus)[keyof typeof NequiTokenStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NequiTokenStatus = {
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	DECLINED: 'DECLINED',
} as const

export interface NequiToken {
	/** Token de la cuenta Nequi */
	id?: string
	status?: NequiTokenStatus
	/** N√∫mero de Cuenta Nequi (tel√©fono celular) */
	phone_number?: string
	/** Nombre del comercio solicitante */
	name?: string
}

export interface CardNew {
	/** N√∫mero completo de la tarjeta de cr√©dito. Sin espacios, √∫nicamente n√∫meros. */
	number: string
	/** C√≥digo de seguridad de la tarjeta de cr√©dito. Tambi√©n llamado CVV o CSC. */
	cvc: string
	/** Mes de vencimiento de la tarjeta en dos d√≠gitos (02, 04, 11, etc.). */
	exp_month: string
	/** A√±o de vencimiento de la tarjeta en dos d√≠gitos (18, 20, 23, etc.). */
	exp_year: string
	/** Nombre del tarjeta habiente. */
	card_holder: string
}

/**
 * Medio de pago de la fuente. Puede ser CARD o NEQUI
 */
export type PaymentSourceTypes =
	(typeof PaymentSourceTypes)[keyof typeof PaymentSourceTypes]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceTypes = {
	CARD: 'CARD',
	NEQUI: 'NEQUI',
} as const

export type PaymentSourceStatuses =
	(typeof PaymentSourceStatuses)[keyof typeof PaymentSourceStatuses]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceStatuses = {
	AVAILABLE: 'AVAILABLE',
	PENDING: 'PENDING',
} as const

export type TokenStatuses = (typeof TokenStatuses)[keyof typeof TokenStatuses]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TokenStatuses = {
	PENDING: 'PENDING',
	CREATED: 'CREATED',
} as const

export type PaymentSourcePublicData = {
	type: PaymentSourceTypes
	phone_number?: string
}

export interface PaymentSource {
	/** Identificador usado para hacer pagos autom√°ticos posteriores, en conjunto con la llave privada del comercio */
	id?: number
	type?: PaymentSourceTypes
	/** Token de la Tarjeta o Cuenta Nequi tokenizada */
	token?: string
	status?: PaymentSourceStatuses
	/** Email del cuentahabiente o tarjetahabiente */
	customer_email?: string
	public_data?: PaymentSourcePublicData
}

export interface PaymentSourceNew {
	type: PaymentSourceTypes
	/** Token representando la tarjeta o n√∫mero Nequi */
	token: string
	/** Token JWT de aceptaci√≥n (ver https://docs.wompi.co/docs/en/tokens-de-aceptacion) */
	acceptance_token: string
	/** Token JWT de aceptaci√≥n personal (ver https://docs.wompi.co/docs/en/tokens-de-aceptacion) */
	accept_personal_auth: string
	/** Correo del pagador */
	customer_email: string
}

/**
 * Moneda en la que se va a realizar la transacci√≥n. √önicamente COP actualmente.
 */
export type PaymentLinkCurrency =
	(typeof PaymentLinkCurrency)[keyof typeof PaymentLinkCurrency]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentLinkCurrency = {
	COP: 'COP',
} as const

export type PaymentLinkCustomerDataCustomerReferencesItem = {
	/**
	 * Nombre del campo. M√°ximo 24 caracteres
	 * @maximum 24
	 */
	label?: string
	/** Si el campo a llenar es obligatorio por parte del pagador para poder realizar el pago */
	is_required?: boolean
}

export type PaymentLinkCustomerData = {
	/** @maxItems 2 */
	customer_references?: PaymentLinkCustomerDataCustomerReferencesItem[]
}

/**
 * Tipo de impuesto. (Valores permitidos "VAT" para IVA y "CONSUMPTION" para impuesto al consumo)
 */
export type PaymentLinkTaxesItemOneOfType =
	(typeof PaymentLinkTaxesItemOneOfType)[keyof typeof PaymentLinkTaxesItemOneOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentLinkTaxesItemOneOfType = {
	VAT: 'VAT',
	CONSUMPTION: 'CONSUMPTION',
} as const

export type PaymentLinkTaxesItemOneOf = {
	/** Tipo de impuesto. (Valores permitidos "VAT" para IVA y "CONSUMPTION" para impuesto al consumo) */
	type?: PaymentLinkTaxesItemOneOfType
	/**
	 * Es el monto que representa el impuesto dentro del monto total, debes expresar el valor en centavos. $1.000 se escribe 100000
	 * @minimum 1
	 * @maximum 1000000000000
	 */
	amount_in_cents?: number
}

/**
 * Tipo de impuesto. (Valores permitidos "VAT" para IVA y "CONSUMPTION" para impuesto al consumo)
 */
export type PaymentLinkTaxesItemOneOfThreeType =
	(typeof PaymentLinkTaxesItemOneOfThreeType)[keyof typeof PaymentLinkTaxesItemOneOfThreeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentLinkTaxesItemOneOfThreeType = {
	VAT: 'VAT',
	CONSUMPTION: 'CONSUMPTION',
} as const

export type PaymentLinkTaxesItemOneOfThree = {
	/** Tipo de impuesto. (Valores permitidos "VAT" para IVA y "CONSUMPTION" para impuesto al consumo) */
	type?: PaymentLinkTaxesItemOneOfThreeType
	/**
	 * Es el porcentaje del impuesto. Ej: 19% se escribe 19
	 * @minimum 1
	 * @maximum 50
	 */
	percentage?: number
}

export type PaymentLinkTaxesItem =
	| PaymentLinkTaxesItemOneOf
	| PaymentLinkTaxesItemOneOfThree

export interface PaymentLink {
	/** Nombre del link de pago */
	name: string
	/** Descripci√≥n del link de pago */
	description: string
	/** `false` en caso de que el link de pago pueda recibir m√∫ltiples transacciones APROBADAS o `true` si debe dejar de aceptar transacciones despu√©s del primer pago APROBADO */
	single_use: boolean
	/** Si deseas que el cliente inserte su informaci√≥n de env√≠o en el checkout, o no */
	collect_shipping: boolean
	/** Si deseas o no que el cliente inserte su tipo y numero documento de identidad en el checkout */
	collect_customer_legal_id?: boolean
	/**
	 * Monto total en centavos de la transacci√≥n. Por ejemplo, para $1.000 se escribe 100000. Si el pago es por un monto espec√≠fico se incluye, si no lo incluyes el pagador podr√° elegir el valor a pagar
	 * @minimum 1
	 * @maximum 1000000000000
	 */
	amount_in_cents?: number
	/** Moneda en la que se va a realizar la transacci√≥n. √önicamente COP actualmente. */
	currency?: PaymentLinkCurrency
	/** Hash criptogr√°fico asim√©trico para validar la integridad de la informaci√≥n de la transacci√≥n. */
	signature?: string
	/** Referencia √∫nica en la base de datos de cada comercio. */
	reference?: string
	/** Fecha y hora en formato ISO8601 (UTC+0000), activa un contador regresivo indicando el tiempo restante para la expiraci√≥n del inicio del pago. */
	expiration_time?: string
	/**
	 * Identificador interno del producto en tu comercio. M√°ximo 36 caracteres
	 * @maximum 36
	 */
	sku?: string
	/** Fecha en formato ISO 8601 con huso horario UTC (+5 horas que el horario colombiano) a partir de la cual el link de pago dejar√° de funcionar. */
	expires_at?: string
	/** URL donde ser√° redirigido el cliente una vez termine el proceso de pago */
	redirect_url?: string
	/** Direcci√≥n de la imagen que quieras presentar en el link de pago */
	image_url?: string
	customer_data?: PaymentLinkCustomerData
	taxes?: PaymentLinkTaxesItem[]
}

export type PaymentLinkAllAllOf = {
	/** ID del link de pago */
	id?: string
	active?: boolean
}

export type PaymentLinkAllAllOfTwo = {
	created_at?: string
	updated_at?: string
}

export type PaymentLinkAll = PaymentLinkAllAllOf &
	PaymentLink &
	PaymentLinkAllAllOfTwo

export interface PaymentLinkPatch {
	/** `false` para desactivar el link de pago, de lo contrario `true` */
	active: boolean
}

export type MerchantLegalIdType =
	(typeof MerchantLegalIdType)[keyof typeof MerchantLegalIdType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MerchantLegalIdType = {
	NIT: 'NIT',
	CC: 'CC',
} as const

export type MerchantAcceptedPaymentMethodsItem =
	(typeof MerchantAcceptedPaymentMethodsItem)[keyof typeof MerchantAcceptedPaymentMethodsItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MerchantAcceptedPaymentMethodsItem = {
	CARD: 'CARD',
	NEQUI: 'NEQUI',
	PSE: 'PSE',
	BANCOLOMBIA_TRANSFER: 'BANCOLOMBIA_TRANSFER',
	BANCOLOMBIA_COLLECT: 'BANCOLOMBIA_COLLECT',
} as const

export type MerchantAcceptedCurrenciesItem =
	(typeof MerchantAcceptedCurrenciesItem)[keyof typeof MerchantAcceptedCurrenciesItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MerchantAcceptedCurrenciesItem = {
	COP: 'COP',
} as const

export type MerchantPresignedAcceptanceType =
	(typeof MerchantPresignedAcceptanceType)[keyof typeof MerchantPresignedAcceptanceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MerchantPresignedAcceptanceType = {
	END_USER_POLICY: 'END_USER_POLICY',
} as const

export type MerchantPresignedAcceptance = {
	acceptance_token?: string
	permalink?: string
	type?: MerchantPresignedAcceptanceType
}

export type MerchantPresignedPersonalDataAuthType =
	(typeof MerchantPresignedPersonalDataAuthType)[keyof typeof MerchantPresignedPersonalDataAuthType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MerchantPresignedPersonalDataAuthType = {
	END_USER_POLICY: 'END_USER_POLICY',
} as const

export type MerchantPresignedPersonalDataAuth = {
	acceptance_token?: string
	permalink?: string
	type?: MerchantPresignedPersonalDataAuthType
}

export interface Merchant {
	id?: number
	name?: string
	legal_name?: string
	legal_id?: string
	legal_id_type?: MerchantLegalIdType
	phone_number?: string
	active?: boolean
	logo_url?: string
	email?: string
	contact_name?: string
	public_key?: string
	accepted_payment_methods?: MerchantAcceptedPaymentMethodsItem[]
	accepted_currencies?: MerchantAcceptedCurrenciesItem[]
	presigned_acceptance?: MerchantPresignedAcceptance
	presigned_personal_data_auth?: MerchantPresignedPersonalDataAuth
}

export interface FinancialInstitution {
	financial_institution_code?: string
	financial_institution_name?: string
}

export type InputValidationErrorErrorMessages = {
	/** Errores de dicha propiedad */
	propiedad_invalida?: string[]
}

export type InputValidationErrorError = {
	/** Tipo de error */
	type?: string
	messages?: InputValidationErrorErrorMessages
}

export interface InputValidationError {
	error?: InputValidationErrorError
}

export type NotFoundErrorError = {
	/** Tipo de error */
	type?: string
	/** Raz√≥n del error */
	reason?: string
}

export interface NotFoundError {
	error?: NotFoundErrorError
}

export type RefundStatuses =
	(typeof RefundStatuses)[keyof typeof RefundStatuses]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundStatuses = {
	PENDING: 'PENDING',
	APPROVED: 'APPROVED',
	DECLINED: 'DECLINED',
	ERROR: 'ERROR',
} as const

export interface Refund {
	id?: number
	status?: RefundStatuses
	amount_in_cents?: number
	transaction_id?: string
	created_at?: string
}

export interface RefundNew {
	/** ID de la transacci√≥n que se quiere reembolsar */
	transaction_id: string
	/**
	 * Monto total o parcial, en centavos, de la transacci√≥n a reembolsar. Por ejemplo, para $10.000 se escribe 1000000
	 * @minimum 1
	 * @maximum 1000000000000
	 */
	amount_in_cents: number
}

export type GetPaymentLinksPaymentLinkId200 = {
	data?: PaymentLinkAll
}

export type PatchPaymentLinksPaymentLinkId200 = {
	data?: PaymentLinkAll
}

export type PostPaymentLinks201 = {
	data?: PaymentLinkAll
}

export type GetPaymentSourcesPaymentSourceId200 = {
	data?: PaymentSource
}

export type PostPaymentSources201 = {
	data?: PaymentSource
}

export type GetTransactionsTransactionId200 = {
	data?: Transaction
}

export type GetTransactionsParams = {
	/**
	 * Referencia de una transacci√≥n. Requerido si no se especifican from_date, until_date, page y page_size
	 */
	reference?: string
	/**
	 * Fecha de inicio de la consulta. Requerido si no se especifica reference
	 */
	from_date?: string
	/**
	 * Fecha final de la consulta. Requerido si no se especifica reference
	 */
	until_date?: string
	/**
	 * N√πmero de p√°gina. Requerido si no se especifica reference
	 */
	page?: number
	/**
	 * N√πmero de transacciones por p√°gina. Requerido si no se especifica reference
	 */
	page_size?: number
	/**
	 * ID de la transacci√≥n
	 */
	id?: string
	payment_method_type?: PaymentMethodTypes
	status?: TransactionStatuses
	/**
	 * Email al cual se env√≠a el comprobante de pago.
	 */
	customer_email?: string
	/**
	 * Nombre del campo para aplicar el ordenamiento
	 */
	order_by?: string
	/**
	 * Orden de entrega de las transacciones
	 */
	order?: GetTransactionsOrder
}

export type GetTransactionsOrder =
	(typeof GetTransactionsOrder)[keyof typeof GetTransactionsOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTransactionsOrder = {
	DESC: 'DESC',
	ASC: 'ASC',
} as const

export type PostTransactions201 = {
	data?: Transaction
}

export type PostTransactionsTransactionIdVoidBody = {
	amount_in_cents?: number
}

export type PostTokensCards201 = {
	status?: TokenStatuses
	data?: CardToken
}

export type PostTokensNequi201 = {
	status?: TokenStatuses
	data?: NequiToken
}

export type GetTokensNequiTokenId200 = {
	data?: NequiToken
}

export type GetMerchantsMerchantPublicKey200 = {
	data?: Merchant
}

export type PostRefunds201 = {
	data?: Refund
}

export type GetRefundsRefundId200 = {
	data?: Refund
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Dato un ID de link de pago, el API retorna su informaci√≥n
 * @summary Obtener un link de pago
 */
export const getPaymentLinksPaymentLinkId = (
	paymentLinkId: string,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<GetPaymentLinksPaymentLinkId200>(
		{ url: `/payment_links/${paymentLinkId}`, method: 'GET' },
		options,
	)
}

/**
 * Dado un objeto JSON con informaci√≥n como monto en centavos, descripci√≥n, multiples pagos, etc. se crea un link de pago. Para m√°s detalles consulta la gu√≠a completa en https://docs.wompi.co/docs/en/links-de-pago
 * @summary Activa o desactiva un link de pago
 */
export const patchPaymentLinksPaymentLinkId = (
	paymentLinkId: string,
	paymentLinkPatch?: PaymentLinkPatch,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PatchPaymentLinksPaymentLinkId200>(
		{
			url: `/payment_links/${paymentLinkId}`,
			method: 'PATCH',
			headers: { 'Content-Type': 'application/json' },
			data: paymentLinkPatch,
		},
		options,
	)
}

/**
 * Dado un objeto JSON con informaci√≥n como monto en centavos, descripci√≥n, multiples pagos, etc. se crea un link de pago. Para m√°s detalles consulta la gu√≠a completa en https://docs.wompi.co/docs/en/links-de-pago
 * @summary Crear un link de pago
 */
export const postPaymentLinks = (
	paymentLink?: PaymentLink,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PostPaymentLinks201>(
		{
			url: '/payment_links',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: paymentLink,
		},
		options,
	)
}

/**
 * Dato un ID de fuente de pago, el API retorna su informaci√≥n. Requiere LLAVE PRIVADA
 * @summary Obtener una fuente de pago
 */
export const getPaymentSourcesPaymentSourceId = (
	paymentSourceId: number,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<GetPaymentSourcesPaymentSourceId200>(
		{ url: `/payment_sources/${paymentSourceId}`, method: 'GET' },
		options,
	)
}

/**
 * Dado un tipo de medio de pago (CARD o NEQUI), un token y un token de aceptaci√≥n crea una fuente de pago
 * @summary Crear una fuente de pago
 */
export const postPaymentSources = (
	paymentSourceNew?: PaymentSourceNew,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PostPaymentSources201>(
		{
			url: '/payment_sources',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: paymentSourceNew,
		},
		options,
	)
}

/**
 * Dado un ID de transacci√≥n, el API retorna su informaci√≥n
 * @summary Obtener una transacci√≥n
 */
export const getTransactionsTransactionId = (
	transactionId: string,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<GetTransactionsTransactionId200>(
		{ url: `/transactions/${transactionId}`, method: 'GET' },
		options,
	)
}

/**
 * Permite obtener un listado de transacciones que coincidan con los criterios de busqueda. Requiere LLAVE PRIVADA
 * @summary Buscar transacciones
 */
export const getTransactions = (
	params?: GetTransactionsParams,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<unknown>(
		{ url: '/transactions', method: 'GET', params },
		options,
	)
}

/**
 * Dado un objeto JSON con informaci√≥n como monto en centavos, referencia, m√©todo de pago, etc. se crea una transacci√≥n. Para m√°s detalles sobre el campo payment_method, consulta la gu√≠a completa en https://docs.wompi.co/docs/en/metodos-de-pago - En caso de usar Fuentes de Pago, debes usar la llave privada, en vez de la p√∫blica.
 * @summary Crear una transacci√≥n
 */
export const postTransactions = (
	transactionNew?: TransactionNew,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PostTransactions201>(
		{
			url: '/transactions',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: transactionNew,
		},
		options,
	)
}

/**
 * Anula una transacci√≥n APROBADA. Aplica √∫nicamente para transacciones con Tarjeta (tipo CARD). Requiere LLAVE PRIVADA
 * @summary Anular una transacci√≥n
 */
export const postTransactionsTransactionIdVoid = (
	transactionId: string,
	postTransactionsTransactionIdVoidBody?: PostTransactionsTransactionIdVoidBody,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<unknown>(
		{
			url: `/transactions/${transactionId}/void`,
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: postTransactionsTransactionIdVoidBody,
		},
		options,
	)
}

/**
 * Dado un n√∫mero de tarjeta, mes de expiraci√≥n, a√±o de expiraci√≥n y CVC, se tokeniza una tarjeta para usarla al crear una transacci√≥n o una fuente de pago. Requiere LLAVE P√öBLICA
 * @summary Tokenizar una tarjeta de cr√©dito
 */
export const postTokensCards = (
	cardNew?: CardNew,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PostTokensCards201>(
		{
			url: '/tokens/cards',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: cardNew,
		},
		options,
	)
}

/**
 * Dado un n√∫mero celular y un nombre completo, se tokeniza una cuenta de Nequi para usarla al crear una transacci√≥n o una fuente de pago. Requiere LLAVE P√öBLICA
 * @summary Tokenizar una cuenta de Nequi
 */
export const postTokensNequi = (
	nequiTokenNew?: NequiTokenNew,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PostTokensNequi201>(
		{
			url: '/tokens/nequi',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: nequiTokenNew,
		},
		options,
	)
}

/**
 * Dado un token de una Cuenta Nequi, se obtiene informaci√≥n sobre si el cuentahabiente Nequi ya acept√≥ la Suscripci√≥n en su app m√≥vil o no. Requiere LLAVE P√öBLICA
 * @summary Obtener informaci√≥n sobre una Cuenta de Nequi tokenizada
 */
export const getTokensNequiTokenId = (
	tokenId: string,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<GetTokensNequiTokenId200>(
		{ url: `/tokens/nequi/${tokenId}`, method: 'GET' },
		options,
	)
}

/**
 * Dado un token p√∫blico de un comercio, se obtiene informaci√≥n del mismo.
 * @summary Obtener un comercio y token de aceptaci√≥n
 */
export const getMerchantsMerchantPublicKey = (
	merchantPublicKey: string,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<GetMerchantsMerchantPublicKey200>(
		{ url: `/merchants/${merchantPublicKey}`, method: 'GET' },
		options,
	)
}

/**
 * Obtener la lista de instituciones financieras con las cuales se puede hacer un pago a trav√©s de PSE. Requiere LLAVE P√öBLICA
 * @summary Listado de instituciones financieras de PSE.
 */
export const getPseFinancialInstitutions = (
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<FinancialInstitution[]>(
		{ url: '/pse/financial_institutions', method: 'GET' },
		options,
	)
}

/**
 * Dado un ID de transacci√≥n y un monto, igual o menor al de una transacci√≥n previamente aprobada, se inicia una solicitud de reembolso cuya respuesta se informar√° a la URL De Eventos (Webhook) que haya configurado el comercio, una vez llegue a un estado final. Tambi√©n puede ser consultado v√≠a API en cualquier momento, dado su ID.
 * @summary Inicia un proceso de reembolso total o parcial, de una transacci√≥n aprobada (Requiere LLAVE PRIVADA)
 */
export const postRefunds = (
	refundNew?: RefundNew,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<PostRefunds201>(
		{
			url: '/refunds',
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			data: refundNew,
		},
		options,
	)
}

/**
 * Dado un ID de reembolso y usando la llave privada como autenticaci√≥n, se obtiene informaci√≥n del mismo.
 * @summary Obtener informaci√≥n de un reembolso (Requiere LLAVE PRIVADA)
 */
export const getRefundsRefundId = (
	refundId: number,
	options?: SecondParameter<typeof defaultInstance>,
) => {
	return defaultInstance<GetRefundsRefundId200>(
		{ url: `/refunds/${refundId}`, method: 'GET' },
		options,
	)
}

export type GetPaymentLinksPaymentLinkIdResult = NonNullable<
	Awaited<ReturnType<typeof getPaymentLinksPaymentLinkId>>
>
export type PatchPaymentLinksPaymentLinkIdResult = NonNullable<
	Awaited<ReturnType<typeof patchPaymentLinksPaymentLinkId>>
>
export type PostPaymentLinksResult = NonNullable<
	Awaited<ReturnType<typeof postPaymentLinks>>
>
export type GetPaymentSourcesPaymentSourceIdResult = NonNullable<
	Awaited<ReturnType<typeof getPaymentSourcesPaymentSourceId>>
>
export type PostPaymentSourcesResult = NonNullable<
	Awaited<ReturnType<typeof postPaymentSources>>
>
export type GetTransactionsTransactionIdResult = NonNullable<
	Awaited<ReturnType<typeof getTransactionsTransactionId>>
>
export type GetTransactionsResult = NonNullable<
	Awaited<ReturnType<typeof getTransactions>>
>
export type PostTransactionsResult = NonNullable<
	Awaited<ReturnType<typeof postTransactions>>
>
export type PostTransactionsTransactionIdVoidResult = NonNullable<
	Awaited<ReturnType<typeof postTransactionsTransactionIdVoid>>
>
export type PostTokensCardsResult = NonNullable<
	Awaited<ReturnType<typeof postTokensCards>>
>
export type PostTokensNequiResult = NonNullable<
	Awaited<ReturnType<typeof postTokensNequi>>
>
export type GetTokensNequiTokenIdResult = NonNullable<
	Awaited<ReturnType<typeof getTokensNequiTokenId>>
>
export type GetMerchantsMerchantPublicKeyResult = NonNullable<
	Awaited<ReturnType<typeof getMerchantsMerchantPublicKey>>
>
export type GetPseFinancialInstitutionsResult = NonNullable<
	Awaited<ReturnType<typeof getPseFinancialInstitutions>>
>
export type PostRefundsResult = NonNullable<
	Awaited<ReturnType<typeof postRefunds>>
>
export type GetRefundsRefundIdResult = NonNullable<
	Awaited<ReturnType<typeof getRefundsRefundId>>
>
